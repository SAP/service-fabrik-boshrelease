#!/bin/bash

set -e # exit immediately if a simple command exits with a non-zero status

# Setup common env vars and folders
source /var/vcap/packages/bosh-helpers/ctl_setup.sh 'docker' 'lvmvd'

create_loop() {
    # test whether volume is already set up
    name=$(losetup -a | grep "${LVMVD_LOOP_DEVICE}" | awk '{print $3}')
    if [ "X$name" = "X" ]; then
        losetup ${LVMVD_LOOP_DEVICE} ${LVMVD_PV_SPARSE_FILE}
    fi
}

retry_delete_loop() {
  local i=0
  local tries=5
  local delay=2
  while [ true ]
  do
      set +e
      delete_loop
      if ! losetup -a | grep -F ${LVMVD_LOOP_DEVICE} &> /dev/null; then
        # If 'delete_loop' was successful, the while-loop can be stopped
        echo "delete_loop was successful"
        break
      fi

      # Otherwise (if the 'delete_loop' call above has failed), this block will be executed
      echo "[RETRY DELETE_LOOP #$i]"
      losetup -a # should not contain /dev/loop1: ... (/var/vcap/store/lvmvd/service-vg.img); if it isn't continue with the next lines
      lsof $LVMVD_PV_SPARSE_FILE
      fuser $LVMVD_PV_SPARSE_FILE
      ps aux
      set -e

      i=$[$i+1]
      if [ $i -gt $tries ]; then
        exit 1
      fi
      sleep $[$delay**$i]
  done
}

delete_loop() {
    local mounted_volumes=$(mount | grep "${LVMVD_MOUNT_DIR}" | awk '{print $3}')
    for vol in $mounted_volumes; do
        echo "Unmounting volume $vol"
        umount $vol
    done
    vgchange -an ${LVMVD_VOLUME_GROUP_NAME}
    losetup -d ${LVMVD_LOOP_DEVICE}
}

# Create physical volume based on loop device (in case it does not exist)
#
create_volume() {
    # only do this if the file which holds the logcial volumes
    # does not exist
    if [ ! -f ${LVMVD_PV_SPARSE_FILE} ]; then
        truncate -s ${LVMVD_PV_SIZE}g ${LVMVD_PV_SPARSE_FILE}
        create_loop
        pvcreate ${LVMVD_LOOP_DEVICE}
        vgcreate ${LVMVD_VOLUME_GROUP_NAME} ${LVMVD_LOOP_DEVICE}
        #delete_loop
        retry_delete_loop
    fi
}

case $1 in

  start)
    pid_guard ${LVMVD_PID_FILE} ${JOB_NAME}

    # Install debian packages
    
    # We install the debian packages while starting the process and not during the
    # packaging phase because during the installation of the packages some necessary
    # prerequesits are done we do not want to reimplement in the bosh release.
    # DON'T CHANGE THE ORDER OF THE PACKAGE NAMES
    
    set +e

    if ! dpkg -s libdevmapper-event1.02.1 > /dev/null 2>&1 ; then
      echo "Installing debian package libdevmapper-event1.02.1"
      dpkg -i /var/vcap/packages/lvm2/libdevmapper-event1.02.1_2_1.02.110-1ubuntu10_amd64.deb
    fi

    if ! dpkg -s liblvm2cmd2.02 > /dev/null 2>&1 ; then
      echo "Installing debian package liblvm2cmd2.02"
      dpkg -i /var/vcap/packages/lvm2/liblvm2cmd2.02_2.02.133-1ubuntu10_amd64.deb
    fi

    if ! dpkg -s dmeventd > /dev/null 2>&1 ; then
      echo "Installing debian package dmeventd"
      dpkg -i /var/vcap/packages/lvm2/dmeventd_2_1.02.110-1ubuntu10_amd64.deb
      sudo dpkg --configure -a 
    fi

    if ! dpkg -s liblvm2app2.2 > /dev/null 2>&1 ; then
      echo "Installing debian package liblvm2app2.2"
      dpkg -i /var/vcap/packages/lvm2/liblvm2app2.2_2.02.133-1ubuntu10_amd64.deb
    fi

    if ! dpkg -s lvm2 > /dev/null 2>&1 ; then
      echo "Installing debian package lvm2"
      dpkg -i /var/vcap/packages/lvm2/lvm2_2.02.133-1ubuntu10_amd64.deb
    fi

    systemctl enable lvm2-lvmetad.service
    systemctl enable lvm2-lvmetad.socket
    systemctl start lvm2-lvmetad.service
    systemctl start lvm2-lvmetad.socket
     
#    for package in liblvm2cmd2 dmeventd liblvm2app2 lvm2
#    do
    
	  # check if package already installed else install, incase package not found
	  # using dpkg -s for checking the installation which does not lock the /var/lib/dpkg/lock  
	  
	 
#      if ! dpkg -s $package > /dev/null 2>&1 ; then
#        echo "Installing debian package $package"
#		set -e
#        dpkg -i "$(ls -1 /var/vcap/packages/lvm2/${package}_*.deb | head -1)"
#		set +e 
#      fi
#    done
	set -e

    # To disable lvm archive
    sed -i 's/ archive = 1/ archive = 0/g' /etc/lvm/lvm.conf

    create_volume
    create_loop

    echo $$ > ${LVMVD_PID_FILE}

    exec /var/vcap/packages/lvmvd/bin/lvmvd \
        --default-size ${LVMVD_DEFAULT_SIZE} \
        --mount-root ${LVMVD_MOUNT_DIR} \
        --volume-group-name ${LVMVD_VOLUME_GROUP_NAME} \
        --sock-file ${LVMVD_SOCKET_FILE} \
        >>${LVMVD_LOG_DIR}/${OUTPUT_LABEL}.stdout.log \
        2>>${LVMVD_LOG_DIR}/${OUTPUT_LABEL}.stderr.log
    ;;

  stop)
    set +e
    # Stop Swarm Manager daemon
    kill_and_wait ${LVMVD_PID_FILE}
    #delete_loop
    retry_delete_loop
   
    #kill any process using the mounted volume
    kill -9 $(lsof -t $DOCKER_VOLUME_MOUNTDIR)
    sleep 2s
    set -e
    ;;

  *)
    echo "Usage: $0 {start|stop}"
    exit 1
    ;;

esac
exit 0
