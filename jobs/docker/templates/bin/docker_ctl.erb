#!/bin/bash

set -e # exit immediately if a simple command exits with a non-zero status

# Setup common env vars and folders
source /var/vcap/packages/bosh-helpers/ctl_setup.sh 'docker'
export DOCKER_PID_FILE=${DOCKER_PID_DIR}/docker.pid
export PATH="/var/vcap/packages/docker/bin:$PATH"

case $1 in

  start)
    pid_guard ${DOCKER_PID_FILE} ${JOB_NAME}

    # Install aufs-tools
    
	# check if package already installed else install, incase package not found
	# using dpkg -s for checking the installation which does not lock the /var/lib/dpkg/lock
	
	
     set +e
     if ! dpkg -s aufs-tools > /dev/null 2>&1 ; then
        echo "Installing debian package aufs-tools"
        set -e
        dpkg -i "$(ls /var/vcap/packages/docker/aufs-tools_*.deb | head -1)"
        set +e
     fi
     set -e
	
    # Enable logrotate via a cron job.
    # Note : Logrotate is configured in the bosh stemcell to run every 15 mins and  the same is leveraged in the below . 
    if [ ! -L /etc/logrotate.d/docker-logrotate ]; then
      ln -s /var/vcap/jobs/docker/config/docker-logrotate /etc/logrotate.d/docker-logrotate
    fi

    # Create docker data store
    if [ ! -d ${DOCKER_STORE_DIR}/docker ]; then
      mkdir -p ${DOCKER_STORE_DIR}/docker
      chmod 770 ${DOCKER_STORE_DIR}/docker
    fi

    # Set ulimits
    ulimit -n ${DOCKER_ULIMIT_NOFILE}

    # Open up the docker demon port, remove any drop rule on the port
    set +e
    iptables -D INPUT -p tcp --dport ${DOCKER_TCP_PORT} -j DROP
    set -e

    # Mount cgroupfs hierarchy
    ${JOB_DIR}/bin/cgroupfs-mount

    # Create user for usernamespace if DOCKER_ENABLE_USERNS is true
    if [ ! -z ${DOCKER_ENABLE_USERNS} ]; then
        set +e                                                             
        egrep  -i "^dockremap:" /etc/passwd                                
        if [ $? -ne 0 ]; then                                              
            sudo useradd --no-create-home --system dockremap                 
        fi                                                                                                                                       
        egrep -i "^dockremap:" /etc/subuid                                 
        if [ $? -ne 0 ]; then                                              
            sudo sh -c 'echo dockremap:500000:65536 >> /etc/subuid'          
        fi                                                                 
        egrep -i "^dockremap:" /etc/subgid                                 
        if [ $? -ne 0 ]; then                                              
            sudo sh -c 'echo dockremap:500000:65536 >> /etc/subgid'          
        fi                                                                 
        set -e
    fi                                                           

    #create symlink from /etc/docker/key.json to /var/vcap/store/docker/key.json
    if [[ ! -d /etc/docker ]] ; then
      mkdir /etc/docker
      ln -s "${DOCKER_DAEMON_KEY_FILE_ARG}" /etc/docker/key.json
    elif [[ ! -f /etc/docker/key.json  ]] ; then
      ln -s "${DOCKER_DAEMON_KEY_FILE_ARG}" /etc/docker/key.json
    else
      link_target=$(readlink -f /etc/docker/key.json)
      if [[ "${link_target}" != "${DOCKER_DAEMON_KEY_FILE_ARG}" ]]; then
        mv /etc/docker/key.json /etc/docker/key.json.backup
        ln -s "${DOCKER_DAEMON_KEY_FILE_ARG}" /etc/docker/key.json
      fi
    fi
    
    # Start Docker daemon
    exec dockerd \
        ${DOCKER_API_CORS_HEADER} \
        ${DOCKER_BRIDGE:-} \
        ${DOCKER_DEBUG} \
        ${DOCKER_DEFAULT_GATEWAY:-} \
        ${DOCKER_DEFAULT_GATEWAY_V6:-} \
        ${DOCKER_DEFAULT_ULIMITS:-} \
        ${DOCKER_DNS_SERVERS:-} \
        ${DOCKER_DNS_OPTIONS:-} \
        ${DOCKER_DNS_SEARCH:-} \
        ${DOCKER_EXEC_OPTIONS:-} \
        ${DOCKER_ENABLE_USERNS:-} \
        --exec-root ${DOCKER_DATA_DIR} \
        --group vcap \
        --data-root ${DOCKER_STORE_DIR}/docker \
        --host unix://${DOCKER_PID_DIR}/docker.sock \
        ${DOCKER_ICC} \
        ${DOCKER_INSECURE_REGISTRIES:-} \
        ${DOCKER_IP:-} \
        ${DOCKER_IPFORWARD} \
        ${DOCKER_IPMASQ} \
        ${DOCKER_IPTABLES} \
        ${DOCKER_IPV6} \
        ${DOCKER_LABELS:-} \
        ${DOCKER_LOG_LEVEL} \
        ${DOCKER_LOG_DRIVER:-} \
        ${DOCKER_LOG_OPTIONS:-} \
        ${DOCKER_MTU:-} \
        --pidfile ${DOCKER_PID_FILE} \
        ${DOCKER_REGISTRY_MIRRORS:-} \
        ${DOCKER_SELINUX_ENABLED} \
        ${DOCKER_STORAGE_DRIVER:-} \
        ${DOCKER_STORAGE_OPTIONS:-} \
        ${DOCKER_TCP:-} \
        ${DOCKER_TLS} \
        ${DOCKER_TLS_CACERT:-} \
        ${DOCKER_TLS_CERT:-} \
        ${DOCKER_TLS_KEY:-} \
        ${DOCKER_TLS_VERIFY_OPTION:-} \
        ${DOCKER_USERLAND_PROXY} \
        >>${DOCKER_LOG_DIR}/${OUTPUT_LABEL}.stdout.log \
        2>>${DOCKER_LOG_DIR}/${OUTPUT_LABEL}.stderr.log
    ;;

  stop)
    set +e
    # Stop Docker containers
    
    # Before stopping the docker deamon & containers block the demon port so that no further create
    # request are allowed/serviced during the stopping process, else if any create container request 
    # is allowed in-between it will keep using the lvm volume which will keep the corresponding device 
    # busy and not allowing device to be unmounted during node update.
    iptables -A INPUT -p tcp --dport ${DOCKER_TCP_PORT} -j DROP
    export DOCKER_HOST="unix://${DOCKER_PID_DIR}/docker.sock"

    # It is necessary to unset following variables due to this issue: https://github.com/moby/moby/issues/36535
    # We are in fact not using DOCKER_TLS_VERIFY, but DOCKER_TLS is sourced for monit start, which causes below
    # docker-cli commands to connect over TLS to docker daemon even over unix socket due to above bug in CLI.
    export DOCKER_TLS=
    export DOCKER_TLS_VERIFY=
    alias docker='/var/vcap/packages/docker/bin/docker'
    echo "Stopping docker containers..."
    containers="$(docker ps -q)"
    if [[ ! -z $containers ]]; then
      for container in $containers
      do
        echo "Stopping docker container ${container} gracefully or kill it after grace period"
        docker stop -t 5 ${container}
      done
    fi
    
    sleep 10s
    # forcefully kill all the containers that did not stop for any reason
    docker kill  $(docker ps -q)

    # Stop Docker daemon
    echo -n "Stopping docker daemon..."
    kill_and_wait ${DOCKER_PID_FILE}

    # Unblock the port docker demon port by removing the rule
    iptables -D INPUT -p tcp --dport ${DOCKER_TCP_PORT} -j DROP
    set -e
    ;;

  *)
    echo "Usage: $0 {start|stop}"
    exit 1
    ;;

esac
exit 0
