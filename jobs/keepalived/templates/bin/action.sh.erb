#!/bin/bash
set -e
STATE=$1
iaas_name='<%= p('iaas_config.name', nil) %>'
SOURCE_IP=<%= spec.ip %>
<% if ( spec.ip == p('master_ip') ) %>
PEER_IP=<%= p('slave_ip') %>
<% else %>
PEER_IP=<%= p('master_ip') %>
<% end %>
<% internal = link("broker").p('internal') %>
virtual_ip=<%= internal['ip'] %>

attach_vip_to_interface(){
  if [[ "$(sudo ip addr show | grep $virtual_ip)" != *"$virtual_ip"* ]]; then
    sudo ip addr add "${virtual_ip}" dev eth0
  fi
}

detach_vip_from_interface(){
  set +e
  sudo ip addr del "${virtual_ip}"/32 dev eth0
  set -e
}

if [[ "$iaas_name" == "aws" ]]; then
  SUBNET_ID='<%= spec.networks.sf_service_fabrik_broker.cloud_properties.subnet %>'
  IAAS_CONFIG='<%= JSON.dump(p('iaas_config', nil)) %>'
  AWS_CLI_CMD=/var/vcap/packages/aws-cli/bin/aws
  JQ_CMD=/var/vcap/packages/jq/bin/jq
  RESTART_FABRIK_STATUS_POLLER_SCRIPT=/var/vcap/jobs/service-fabrik-broker/bin/restartFabrikStatusPoller.js

  ACCESS_KEY_ID="$(echo "${IAAS_CONFIG}" | "${JQ_CMD}" -r '.keyId')"
  SECRET_ACCESS_KEY="$(echo "${IAAS_CONFIG}" | "${JQ_CMD}" -r '.key')"
  REGION_NAME="$(echo "${IAAS_CONFIG}" | "${JQ_CMD}" -r '.region')"

  $AWS_CLI_CMD configure set aws_access_key_id "$ACCESS_KEY_ID"
  $AWS_CLI_CMD configure set aws_secret_access_key "$SECRET_ACCESS_KEY"
  $AWS_CLI_CMD configure set region "$REGION_NAME"

  if [[ "$STATE" == "MASTER" ]]; then
    network_metadata=$("$AWS_CLI_CMD" ec2 describe-network-interfaces --filter "Name=private-ip-address,Values=${SOURCE_IP}" | "${JQ_CMD}" -r --arg SUBNET_ID "$SUBNET_ID" '.[][] | select(.SubnetId==$SUBNET_ID)')
    export ENI_ID=$(echo "$network_metadata" | "${JQ_CMD}" -r '.NetworkInterfaceId')
    $AWS_CLI_CMD ec2 assign-private-ip-addresses --network-interface-id $ENI_ID --allow-reassignment --private-ip-addresses $virtual_ip
    attach_vip_to_interface
  elif [[ "$STATE" == "BACKUP" ]] || [[ "$STATE" == "FAULT" ]]; then
    detach_vip_from_interface
  fi
elif [[ "$iaas_name" == "openstack"  ]]; then
  # shellcheck disable=SC1091
  source /var/vcap/jobs/keepalived/bin/utils/openstack/generate_token
  source /var/vcap/jobs/keepalived/bin/utils/openstack/port_operations
  this_port_id=$(get_port_id "${SOURCE_IP}")
  if [[ "$STATE" == "MASTER" ]]; then
    port_update_response=$(update_port "${this_port_id}")
    peer_port_id=$(get_port_id "${PEER_IP}")
    port_update_response=$(update_port "${peer_port_id}")
    port_update_response=$(update_port "${this_port_id}" "${virtual_ip}")
    attach_vip_to_interface
  elif [[ "$STATE" == "BACKUP" ]] || [[ "$STATE" == "FAULT" ]]; then
    port_update_response=$(update_port "${this_port_id}")
    detach_vip_from_interface
  fi
fi
exit 0
