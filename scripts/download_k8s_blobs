#!/bin/bash

# Usage download_k8s_blobs [K8S_VERSION]
# This script downloads the k8s binaries and adds them in the blob folder and in the blob.yaml
# Please add proper private.yml and run `bosh upload-blobs` to uplaod them in the blobstore
set -e

main() {
  local staging_dir kubernetes_version
  kubernetes_version=$1

  if [ $# -ne 1 ]; then
    echo "Usage: $(basename "$0") [KUBERNETES VERSION]"
    exit  1
  fi
  staging_dir=$(mktemp -d)

  trap '{ rm -rf "$staging_dir"; }' EXIT

  linux_binaries=(
    "kube-apiserver"
    "kubectl"
  )

  pushd "$(dirname "${BASH_SOURCE[0]}")/.."
    for binary in "${linux_binaries[@]}"; do
      echo "${binary}"

      pushd "packages/apiserver"
        sed -E -i -e "s/([0-9]+\.)+[0-9]+/${kubernetes_version}/" packaging
        sed -E -i -e "s/([0-9]+\.)+[0-9]+/${kubernetes_version}/" spec
      popd
      pushd "packages/kubectl"
        sed -E -i -e "s/([0-9]+\.)+[0-9]+/${kubernetes_version}/" packaging
        sed -E -i -e "s/([0-9]+\.)+[0-9]+/${kubernetes_version}/" spec
      popd

      download "${binary}" "${staging_dir}" "${kubernetes_version}" "linux"
      add_blob "${binary}" "${staging_dir}" "${kubernetes_version}"
    done

  popd
}

download() {
  local binary_name staging_dir kubernetes_version platform
  binary_name="$1"
  staging_dir="$2"
  kubernetes_version="$3"
  platform="$4"

  wget -O "${staging_dir}/${binary_name}" "https://storage.googleapis.com/kubernetes-release/release/v${kubernetes_version}/bin/${platform}/amd64/${binary_name}"
}

add_blob() {
  local binary_name blob_name staging_dir kubernetes_version
  binary_name="$1"
  staging_dir="$2"
  kubernetes_version="$3"

  bosh add-blob "${staging_dir}/${binary_name}" "kubernetes-${kubernetes_version}/${binary_name}"
}

main "$@"